name: Deploy to Staging

on:
  push:
    branches: [develop]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - preview

env:
  AWS_REGION: "us-east-1"
  ENVIRONMENT: "staging"

jobs:
  # Deploy Infrastructure
  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.6.0"

      - name: Terraform Init
        run: |
          cd infrastructure/terraform
          terraform init

      - name: Terraform Plan
        run: |
          cd infrastructure/terraform
          terraform plan -out=tfplan

      - name: Terraform Apply
        run: |
          cd infrastructure/terraform
          terraform apply -auto-approve tfplan

      - name: Get infrastructure outputs
        id: terraform-outputs
        run: |
          cd infrastructure/terraform
          echo "ec2_public_ip=$(terraform output -raw ec2_public_ip)" >> $GITHUB_OUTPUT
          echo "rds_endpoint=$(terraform output -raw rds_endpoint)" >> $GITHUB_OUTPUT
          echo "redis_endpoint=$(terraform output -raw redis_endpoint)" >> $GITHUB_OUTPUT
          echo "s3_bucket=$(terraform output -raw s3_main_bucket)" >> $GITHUB_OUTPUT

  # Build and Push Docker Images
  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: deploy-infrastructure

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/gambleglee-backend:${{ github.sha }}
            ${{ steps.login-ecr.outputs.registry }}/gambleglee-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/gambleglee-frontend:${{ github.sha }}
            ${{ steps.login-ecr.outputs.registry }}/gambleglee-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy Application
  deploy-application:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, build-and-push]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ needs.deploy-infrastructure.outputs.ec2_public_ip }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Update application code
            cd /opt/gambleglee
            git pull origin develop

            # Update environment variables
            cat > .env << EOF
            DATABASE_URL=postgresql://gambleglee:${{ secrets.DB_PASSWORD }}@${{ needs.deploy-infrastructure.outputs.rds_endpoint }}:5432/gambleglee
            REDIS_URL=redis://${{ needs.deploy-infrastructure.outputs.redis_endpoint }}:6379
            AWS_REGION=${{ env.AWS_REGION }}
            S3_BUCKET=${{ needs.deploy-infrastructure.outputs.s3_bucket }}
            ENVIRONMENT=${{ env.ENVIRONMENT }}
            DEBUG=false
            SECRET_KEY=${{ secrets.SECRET_KEY }}
            JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
            STRIPE_PUBLISHABLE_KEY=${{ secrets.STRIPE_PUBLISHABLE_KEY }}
            STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}
            STRIPE_WEBHOOK_SECRET=${{ secrets.STRIPE_WEBHOOK_SECRET }}
            MERCADOPAGO_ACCESS_TOKEN=${{ secrets.MERCADOPAGO_ACCESS_TOKEN }}
            MERCADOPAGO_PUBLIC_KEY=${{ secrets.MERCADOPAGO_PUBLIC_KEY }}
            MERCADOPAGO_WEBHOOK_SECRET=${{ secrets.MERCADOPAGO_WEBHOOK_SECRET }}
            EOF

            # Pull latest images
            docker-compose pull

            # Restart services
            docker-compose up -d

            # Wait for services to be healthy
            sleep 30

            # Run database migrations
            docker-compose exec backend alembic upgrade head

            # Check application health
            curl -f http://localhost:8000/health || exit 1

  # Run Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: deploy-application

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run integration tests against staging
        run: |
          cd backend
          pytest tests/integration/ -v --base-url=http://${{ needs.deploy-application.outputs.ec2_public_ip }}

  # Health Check
  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: [deploy-application, integration-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run health check
        run: |
          # Wait for application to be ready
          sleep 60

          # Check backend health
          curl -f http://${{ needs.deploy-application.outputs.ec2_public_ip }}/health || exit 1

          # Check frontend
          curl -f http://${{ needs.deploy-application.outputs.ec2_public_ip }}/ || exit 1

          # Check API endpoints
          curl -f http://${{ needs.deploy-application.outputs.ec2_public_ip }}/api/health || exit 1

      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: "Staging deployment successful! 🚀"
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: success()

      - name: Notify deployment failure
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: "Staging deployment failed! ❌"
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: failure()

  # Update Deployment Status
  update-status:
    name: Update Deployment Status
    runs-on: ubuntu-latest
    needs:
      [
        deploy-infrastructure,
        build-and-push,
        deploy-application,
        integration-tests,
        health-check,
      ]
    if: always()

    steps:
      - name: Update deployment status
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Infrastructure | ${{ needs.deploy-infrastructure.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Build | ${{ needs.build-and-push.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Application Deploy | ${{ needs.deploy-application.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.integration-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Health Check | ${{ needs.health-check.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Staging URL**: http://${{ needs.deploy-infrastructure.outputs.ec2_public_ip }}" >> $GITHUB_STEP_SUMMARY
