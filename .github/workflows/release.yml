name: Release Management

on:
  push:
    branches: [release/*]
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., 1.2.0)"
        required: true
        type: string
      release_type:
        description: "Type of release"
        required: true
        type: choice
        options:
          - major
          - minor
          - patch
          - hotfix

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"

jobs:
  # Pre-release Validation
  pre-release-validation:
    name: Pre-release Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate version format
        run: |
          if [[ ! "${{ github.event.inputs.version || github.ref_name }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid version format. Expected: X.Y.Z"
            exit 1
          fi

      - name: Check if version already exists
        run: |
          VERSION="${{ github.event.inputs.version || github.ref_name }}"
          if git tag -l | grep -q "v$VERSION"; then
            echo "Version v$VERSION already exists"
            exit 1
          fi

      - name: Run comprehensive tests
        run: |
          # Run all test suites
          echo "Running comprehensive test suite..."
          # This would run all tests including unit, integration, and E2E

      - name: Run security audit
        run: |
          echo "Running security audit..."
          # Run security scans and compliance checks

      - name: Run performance tests
        run: |
          echo "Running performance tests..."
          # Run load tests and performance benchmarks

  # Update Version and Changelog
  update-version:
    name: Update Version and Changelog
    runs-on: ubuntu-latest
    needs: pre-release-validation

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Update version in package.json
        run: |
          cd frontend
          VERSION="${{ github.event.inputs.version || github.ref_name }}"
          npm version $VERSION --no-git-tag-version

      - name: Update version in pyproject.toml
        run: |
          cd backend
          VERSION="${{ github.event.inputs.version || github.ref_name }}"
          sed -i "s/version = \".*\"/version = \"$VERSION\"/" pyproject.toml

      - name: Update CHANGELOG.md
        run: |
          VERSION="${{ github.event.inputs.version || github.ref_name }}"
          DATE=$(date +%Y-%m-%d)

          # Create changelog entry
          cat > changelog_entry.md << EOF
          ## [v$VERSION] - $DATE

          ### Added
          - New features and enhancements

          ### Changed
          - Changes to existing functionality

          ### Fixed
          - Bug fixes and improvements

          ### Security
          - Security updates and patches

          ### Compliance
          - Compliance updates and improvements
          EOF

          # Insert at the top of CHANGELOG.md
          if [ -f CHANGELOG.md ]; then
            cat changelog_entry.md CHANGELOG.md > temp_changelog.md
            mv temp_changelog.md CHANGELOG.md
          else
            mv changelog_entry.md CHANGELOG.md
          fi

      - name: Commit changes
        run: |
          git add .
          git commit -m "chore: bump version to v${{ github.event.inputs.version || github.ref_name }}"
          git push origin HEAD

  # Create Release Branch
  create-release-branch:
    name: Create Release Branch
    runs-on: ubuntu-latest
    needs: update-version

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create release branch
        run: |
          VERSION="${{ github.event.inputs.version || github.ref_name }}"
          git checkout -b release/v$VERSION
          git push origin release/v$VERSION

  # Build Release Artifacts
  build-artifacts:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: create-release-branch

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Build backend
        run: |
          cd backend
          pip install -r requirements.txt
          pip install build
          python -m build

      - name: Build frontend
        run: |
          cd frontend
          npm ci
          npm run build

      - name: Create release archive
        run: |
          VERSION="${{ github.event.inputs.version || github.ref_name }}"
          tar -czf gambleglee-v$VERSION.tar.gz \
            --exclude=node_modules \
            --exclude=.git \
            --exclude=__pycache__ \
            --exclude=.pytest_cache \
            --exclude=coverage \
            .

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-artifacts
          path: |
            gambleglee-v${{ github.event.inputs.version || github.ref_name }}.tar.gz
            backend/dist/
            frontend/dist/

  # Create GitHub Release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [create-release-branch, build-artifacts]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: release-artifacts

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.event.inputs.version || github.ref_name }}
          release_name: Release v${{ github.event.inputs.version || github.ref_name }}
          body: |
            ## What's New in v${{ github.event.inputs.version || github.ref_name }}

            See [CHANGELOG.md](CHANGELOG.md) for detailed changes.

            ## Installation

            ### Docker (Recommended)
            ```bash
            docker-compose up -d
            ```

            ### Manual Installation
            1. Download the release artifacts
            2. Follow the installation guide in README.md

            ## Deployment

            ### Staging
            - Automatic deployment to staging environment
            - URL: https://staging.gambleglee.com

            ### Production
            - Manual approval required for production deployment
            - URL: https://gambleglee.com

            ## Rollback

            If issues are detected, rollback using:
            ```bash
            git checkout v$(echo ${{ github.event.inputs.version || github.ref_name }} | sed 's/v//' | awk -F. '{print $1"."$2"."$3-1}')
            ```

            ## Support

            - Documentation: [docs.gambleglee.com](https://docs.gambleglee.com)
            - Issues: [GitHub Issues](https://github.com/gambleglee/gambleglee/issues)
            - Support: support@gambleglee.com
          draft: false
          prerelease: false

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: create-release
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # This would trigger the staging deployment workflow

  # Production Deployment Approval
  production-approval:
    name: Production Deployment Approval
    runs-on: ubuntu-latest
    needs: [create-release, deploy-staging]
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Wait for approval
        run: |
          echo "Waiting for production deployment approval..."
          echo "Please review the staging deployment and approve production deployment."

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: production-approval
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # This would trigger the production deployment workflow

  # Post-release Tasks
  post-release:
    name: Post-release Tasks
    runs-on: ubuntu-latest
    needs: [create-release, deploy-staging, production-approval]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Merge release branch to main
        run: |
          VERSION="${{ github.event.inputs.version || github.ref_name }}"
          git checkout main
          git merge release/v$VERSION
          git push origin main

      - name: Merge release branch to develop
        run: |
          VERSION="${{ github.event.inputs.version || github.ref_name }}"
          git checkout develop
          git merge release/v$VERSION
          git push origin develop

      - name: Delete release branch
        run: |
          VERSION="${{ github.event.inputs.version || github.ref_name }}"
          git push origin --delete release/v$VERSION

      - name: Notify release success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: "Release v${{ github.event.inputs.version || github.ref_name }} deployed successfully! 🚀"
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: success()

      - name: Notify release failure
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: "Release v${{ github.event.inputs.version || github.ref_name }} failed! ❌"
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: failure()

      - name: Update release status
        run: |
          echo "## Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Version**: v${{ github.event.inputs.version || github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Type**: ${{ github.event.inputs.release_type || 'release' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Task | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Pre-release Validation | ${{ needs.pre-release-validation.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Version Update | ${{ needs.update-version.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Release Branch | ${{ needs.create-release-branch.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Artifacts | ${{ needs.build-artifacts.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| GitHub Release | ${{ needs.create-release.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Staging Deploy | ${{ needs.deploy-staging.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Production Approval | ${{ needs.production-approval.result }} |" >> $GITHUB_STEP_SUMMARY
